#
# Configuration File for JavaScript Lint 0.3.0
# Developed by Matthias Miller (http://www.JavaScriptLint.com)
#
# This configuration file can be used to lint a collection of scripts, or to enable
# or disable warnings for scripts that are linted via the command line.
#

### Warnings
# Enable or disable warnings based on requirements.
# Use "+WarningName" to display or "-WarningName" to suppress.
#

# 返り値の有無が条件によって変わらないこと
# https://searchcode.com/codesearch/view/21681029/
+no_return_value              # function {0} does not always return a value

# 引数が重複していないこと
# https://searchcode.com/codesearch/view/21681035/
+duplicate_formal             # duplicate formal argument {0}

# == を使うべきところに = を使用していないこと
# https://searchcode.com/codesearch/view/21681021/
+equal_as_assign              # test for equality (==) mistyped as assignment (=)?{0}

# 関数の引数を上書きしていないこと
# https://searchcode.com/codesearch/view/21681015/
+var_hides_arg                # variable {0} hides argument

# 変数の重複宣言をしていないこと
# https://searchcode.com/codesearch/view/21681001/
+redeclared_var               # redeclaration of {0} {1}

# 無名関数の返り値の有無が条件によって変わらないこと
# https://searchcode.com/codesearch/view/21681020/
+anon_no_return_value         # anonymous function does not always return a value

# セミコロンをつけていること
# https://searchcode.com/codesearch/view/21680996/
+missing_semicolon            # missing semicolon

# 無意味なブロックを使用していないこと
# https://searchcode.com/codesearch/view/21681010/
+meaningless_block            # meaningless block; curly braces have no impact

# セミコロンではなくコンマで区切られてしまっている文がないこと
# https://searchcode.com/codesearch/view/21681008/
+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)

# 実行されることの無いコードはないこと
# https://searchcode.com/codesearch/view/21681017/
+unreachable_code             # unreachable code

# breakの無いcase文はないこと
# https://searchcode.com/codesearch/view/21681011/
+missing_break                # missing break statement

# 最後のcase文にbreakが存在していること
# https://searchcode.com/codesearch/view/21681006/
-missing_break_for_last_case  # missing break statement for last case in switch

# 厳密な型比較を行っていること
# https://searchcode.com/codesearch/view/21681009/
# https://github.com/mitsuruog/javascript-style-guide/blob/master/es5/README.md#条件式と等価式-原文
+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)

# おかしな場所でのインクリメントやデクリメントをしていないこと
# https://searchcode.com/codesearch/view/21681018/
+inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement

# voidを使用していないこと
# https://searchcode.com/codesearch/view/21681025/
+useless_void                 # use of the void type may be unnecessary (void is always undefined)

# 'x+++y'の様に連続している'+'や'-'が存在しないこと
# https://searchcode.com/codesearch/view/21681000/
+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs

# ラベルを使用していないこと
# https://searchcode.com/codesearch/view/21681024/
+use_of_label                 # use of label

# ブロック文には{}を使用していること
# https://searchcode.com/codesearch/view/21681026/
+block_without_braces         # block statement without curly braces

# 数値の前に不要な小数点がないこと
# https://searchcode.com/codesearch/view/21681012/
+leading_decimal_point        # leading decimal point may indicate a number or an object member

# 数値の後ろに不要な小数点がないこと
# https://searchcode.com/codesearch/view/21680997/
+trailing_decimal_point       # trailing decimal point may indicate a number or an object member

# 0から始まるリテラルを使用して8進数を表現していないこと
# https://searchcode.com/codesearch/view/21680995/
+octal_number                 # leading zeros make an octal number

# コメントがネストしていないこと
# https://searchcode.com/codesearch/view/21681013/
+nested_comment               # nested comment

# バーレンやアサインメント、コロンやカンマが前に来ていない正規表現がないこと
# https://searchcode.com/codesearch/view/21681032/
+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma

# 一つの文なのかそうじゃないのか分からない、繋がった文がないこと
# https://searchcode.com/codesearch/view/21681034/
+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement

# 空の文(statement)、またはセミコロンだけの行がないこと
# https://searchcode.com/codesearch/view/21681004/
-empty_statement              # empty statement or extra semicolon

# jslのoptionを設定していること
# https://searchcode.com/codesearch/view/21680999/
-missing_option_explicit      # the "option explicit" control comment is missing

# jslのoptionを設定していること
# https://searchcode.com/codesearch/view/21681036/
-partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag

# jslのoptionが重複していないこと
# https://searchcode.com/codesearch/view/21681019/
-dup_option_explicit          # duplicate "option explicit" control comment

# 不要な変数設定をしていないこと
# https://searchcode.com/codesearch/view/21681022/
+useless_assign               # useless assignment

# 分かりづらいブロックのネストがないこと
# https://searchcode.com/codesearch/view/21681033/
+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity

# 分かりづらいelse文がないこと
# https://searchcode.com/codesearch/view/21681014/
+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent)

# default caseを使用していること
# https://searchcode.com/codesearch/view/21681023/
+missing_default_case         # missing default case in switch statement

# 重複しているcase文がないこと
# https://searchcode.com/codesearch/view/21681002/
+duplicate_case_in_switch     # duplicate case in switch statements

# defaultケースは最後に設定していること
# https://searchcode.com/codesearch/view/21681003/
+default_not_at_end           # the default case is not at the end of the switch statement

# 古いjsl設定を使用していないこと
# https://searchcode.com/codesearch/view/21681016/
-legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax

# 不明なjsl設定を使用していないこと
# https://searchcode.com/codesearch/view/21681027/
-jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax

# 意味の無い比較を行っていないこと
# https://searchcode.com/codesearch/view/21680998/
+useless_comparison           # useless comparison; comparing identical expressions

# with文を使用していないこと
# https://searchcode.com/codesearch/view/21681031/
+with_statement               # with statement hides undeclared variables; use temporary variable instead

# 配列内の末尾に余計なカンマがついていないこと
# https://searchcode.com/codesearch/view/21681005/
+trailing_comma_in_array      # extra comma is not recommended in array initializers

# 関数呼び出しに代入していないこと
# https://searchcode.com/codesearch/view/21681028/
+assign_to_function_call      # assignment to a function call

# parseInt()は基数をしていること
# https://searchcode.com/codesearch/view/21681007/
+parseint_missing_radix       # parseInt missing radix parameter


### Output format
# Customize the format of the error message.
#    __FILE__ indicates current file path
#    __FILENAME__ indicates current file name
#    __LINE__ indicates current line
#    __ERROR__ indicates error message
#
# Visual Studio syntax (default):
+output-format __FILE__(__LINE__): __ERROR__
# Alternative syntax:
#+output-format __FILE__:__LINE__: __ERROR__


### Context
# Show the in-line position of the error.
# Use "+context" to display or "-context" to suppress.
#
+context


### Semicolons
# By default, assignments of an anonymous function to a variable or
# property (such as a function prototype) must be followed by a semicolon.
#
+lambda_assign_requires_semicolon


### Control Comments
# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
# although legacy control comments are enabled by default for backward compatibility.
#
+legacy_control_comments


### JScript Function Extensions
# JScript allows member functions to be defined like this:
#     function MyObj() { /*constructor*/ }
#     function MyObj.prototype.go() { /*member function*/ }
#
# It also allows events to be attached like this:
#     function window::onload() { /*init page*/ }
#
# This is a Microsoft-only JavaScript extension. Enable this setting to allow them.
#
-jscript_function_extensions


### Defining identifiers
# By default, "option explicit" is enabled on a per-file basis.
# To enable this for all files, use "+always_use_option_explicit"
-always_use_option_explicit

# Define certain identifiers of which the lint is not aware.
# (Use this in conjunction with the "undeclared identifier" warning.)
#
# Common uses for webpages might be:
#+define window
#+define document


### Files
# Specify which files to lint
# Use "+recurse" to enable recursion (disabled by default).
# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
# or "+process Folder\Path\*.htm".
#
# +process jsl-test.js
