" encoding and color {{{1

if has('vim_starting')
    set encoding=utf-8
    scriptencoding utf-8

    if !has('gui_running') && exists(&termguicolors) && $COLORTERM ==# 'truecolor'
        let &t_8f = "\e[38;2;%lu;%lu;%lum"
        let &t_8b = "\e[48;2;%lu;%lu;%lum"
        set termguicolors
    endif
endif


" Vars:   "{{{1

let g:is_mac      = has('macunix') || (executable('uname') && system('uname') =~? '^darwin')
let g:is_unix     = has('unix') && !g:is_mac
let g:is_win      = has('win32') || has('win64')
let s:tidy_cmd    = ''


" global vars  "{{{2

let $MY_VIMRUNTIME = expand(g:is_win ? '~/vimfiles' : '~/.vim')

let g:oppara_email = 'oppara <oppara _at_ oppara.tv>'
let g:snips_author = g:oppara_email
let g:changelog_username = 'oppara'


let g:mapleader = ','

let g:no_gvimrc_example = 1
let g:no_vimrc_example = 1

let g:loaded_gzip = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
let g:loaded_rrhelper = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1
let g:did_install_default_menus = 1
let g:skip_loading_mswin = 1
let g:did_install_syntax_menu = 1
let g:loaded_2html_plugin = 1
let g:loaded_matchparen = 1


" Options:   "{{{1

" encoding  "{{{2

language C

if ( g:is_mac || g:is_unix )
    set termencoding=utf-8
endif

if has('kaoriya') && has('gui_macvim')
  let did_encoding_settings = 1
endif

if !exists('did_encoding_settings') "{{{3

  " http://www.kawaz.jp/pukiwiki/?vim
  " http://www.ksknet.net/vi/vim_1.html
  if &encoding !=# 'utf-8'
    set encoding=japan
    set fileencoding=japan
  endif

  if has('iconv') "{{{4

    let s:enc_euc = 'euc-jp'
    let s:enc_jis = 'iso-2022-jp'
    " iconv„ÅåeucJP-ms„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Çã„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
      let s:enc_euc = 'eucjp-ms'
      let s:enc_jis = 'iso-2022-jp-3'
      " iconv„ÅåJISX0213„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Çã„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
      let s:enc_euc = 'euc-jisx0213'
      let s:enc_jis = 'iso-2022-jp-3'
    endif

    " fileencodings„ÇíÊßãÁØâ
    if &encoding ==# 'utf-8'

      let s:fileencodings_default = &fileencodings
      let &fileencodings = s:enc_jis .','. s:enc_euc

      if s:fileencodings_default =~ 'utf-8'
        let &fileencodings = &fileencodings .','. s:fileencodings_default
        let &fileencodings = substitute(&fileencodings, "utf-8", "utf-8,cp932", "g")
      else
        let &fileencodings = &fileencodings .',cp932,'. s:fileencodings_default
      endif
      unlet s:fileencodings_default

    else
      let &fileencodings = &fileencodings .','. s:enc_jis
      set fileencodings+=utf-8,ucs-2le,ucs-2
      if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
        set fileencodings+=cp932
        set fileencodings-=euc-jp
        set fileencodings-=euc-jisx0213
        set fileencodings-=eucjp-ms
        let &encoding = s:enc_euc
        let &fileencoding = s:enc_euc
      else
        let &fileencodings = &fileencodings .','. s:enc_euc
      endif
    endif

    unlet s:enc_euc
    unlet s:enc_jis

  else "{{{4
    set fileencodings=utf-8,cp932,euc-jp,iso-2022-jp
    let &fileencodings = 'ucs-bom,iso-2022-jp-3,ucs-2le,ucs-2,' .
          \ ((&encoding ==# 'utf-8') ? 'cp932,euc-jisx0213,euc-jp' :
          \  (&encoding ==# 'cp932') ? 'utf-8,euc-jisx0213,euc-jp' :
          \                            'utf-8,cp932'                ) " 'euc-jp' 'euc-jisx0213'
  endif "}}}

  let did_encoding_settings = 1
endif
" Êó•Êú¨Ë™û„ÇíÂê´„Åæ„Å™„ÅÑÂ†¥Âêà„ÅØ fileencoding „Å´ encoding „Çí‰Ωø„ÅÜ„Çà„ÅÜ„Å´„Åô„Çã
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif


" line feed "{{{2

set fileformats=unix,dos,mac

" tab, indent  "{{{2

set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set smarttab
set autoindent
set smartindent


" search  "{{{2

set magic
set hlsearch
set ignorecase
set smartcase
set incsearch
set wrapscan
set grepprg=internal


" file & buffer  "{{{2

set history=400
set nobackup
set nowritebackup
set noswapfile
set directory-=.
set viminfo='100,<100,:50,%,h,n~/.viminfo


" view  "{{{2

set viewoptions-=options viewoptions+=slash,unix


" tags "{{{3
set tags=./tags;,tags;

" buffer "{{{3
set hidden
set autoread


" input support "{{{2

set virtualedit+=block
set backspace=eol,start,indent
set formatoptions+=m
set whichwrap=b,s,h,l,<,>,[,]
set startofline
" set iminsert=0 imsearch=0
set clipboard+=unnamed


" comletion  "{{{2

setlocal completeopt=menuone,noinsert
setlocal complete=.,w,b,u,k,i " help cpt
" setlocal completefunc=syntaxcomplete#Complete

set wildmenu
set wildmode=list:longest,full


" display "{{{2

set background=dark
set synmaxcol=300

set nonumber
set noruler
set showmatch
set showcmd
set showmode
set lazyredraw
set ttyfast
set ambiwidth=double
set scrolloff=10000
set wrap
set redrawtime=6000

" list "{{{3
set list
set listchars=tab:¬ª_,extends:¬ª,precedes:¬´

" fold "{{{3
set foldenable
set foldlevel=0
set foldmethod=marker


" statusline  "{{{2

set cmdheight=2
set laststatus=2
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']['.&ft.']'}%=%l,%c%V%8P


" scroll  "{{{2
" http://d.hatena.ne.jp/hyuki/20131206/vim
set scrolloff=3


" nofixeol  "{{{2
" https://github.com/vim-jp/issues/issues/152
" ÊúÄÂæå„Å´ÊîπË°å„ÅÆ„Å™„ÅÑ„Éï„Ç°„Ç§„É´„ÇíÁ∑®ÈõÜ„Åó„Åü„Å®„Åç„Å´ÊîπË°å„Çí‰ªò„ÅëÂä†„Åà„Å™„ÅÑ
set nofixeol


" Á∏¶ÂàÜÂâ≤„Çπ„ÇØ„É≠„Éº„É´È´òÈÄüÂåñË®≠ÂÆö:  "{{{1
" https://qiita.com/kefir_/items/c725731d33de4d8fb096
" https://vim-jp.org/vimdoc-ja/term.html#'t_F9'
" Use vsplit mode
if has("vim_starting") && !has("gui_running") && has("vertsplit")
  function! EnableVsplitMode()
    " enable origin mode and left/right margins
    let &t_CS = "y"
    let &t_ti = &t_ti . "\e[?6;69h"
    let &t_te = "\e[?6;69l\e[999H" . &t_te
    let &t_CV = "\e[%i%p1%d;%p2%ds"
    call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
  endfunction

  " old vim does not ignore CPR
  map <special> <Esc>[3;9R <Nop>

  " new vim can't handle CPR with direct mapping
  " map <expr> ^[[3;3R EnableVsplitMode()
  set t_F9=[3;3R
  map <expr> <t_F9> EnableVsplitMode()
  let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif




" vim-plug:  "{{{1

if has("vim_starting")
  let g:plug_dir =  $MY_VIMRUNTIME . '/plugged'
  let g:plug_repo_dir =  g:plug_dir . '/vim-plug/autoload'
  execute 'set runtimepath^=' . fnamemodify(g:plug_repo_dir, ':h')
  if !isdirectory(expand(g:plug_repo_dir))
     execute '!git clone https://github.com/junegunn/vim-plug.git' g:plug_repo_dir
  endif
endif

call plug#begin(g:plug_dir)

  Plug 'junegunn/vim-plug', {'dir': g:plug_repo_dir}

  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'

  Plug 'vim-jp/vimdoc-ja'

  Plug 'itchyny/lightline.vim'
  Plug 'Shougo/vimproc.vim', {'do': 'make'}

  Plug 'neoclide/coc.nvim', {'branch': 'release'}

  Plug 'mattn/vim-molder'
  Plug 'mattn/vim-molder-operations'

  "Plug 'Shougo/context_filetype.vim'

  Plug 'oppara/wombat256opp'

  " Plug 'oppara/snipmate.vim'
  Plug 'majutsushi/tagbar'

  "Plug 'LeafCage/yankround.vim'
  Plug 'thinca/vim-localrc'
  "Plug 'thinca/vim-qfreplace'
  "Plug 'fuenor/qfixgrep'
  "Plug 'anyakichi/vim-qfutil'

  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-endwise', {'for': ['ruby']}

  "" Plug 'scrooloose/nerdtree'
  Plug 'scrooloose/nerdcommenter'
  Plug 'vim-scripts/sudo.vim'

  Plug 'Valloric/MatchTagAlways'

  Plug 'Yggdroot/indentLine'
  "" Plug 'rhysd/migemo-search.vim'
  "" if executable('cmigemo')
    "" cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
  "" endif


  Plug 'mattn/emmet-vim', {'for': ['html', 'xhtml', 'xml', 'css', 'less', 'sass', 'scss', 'slim', 'haml', 'jade', 'php']}

  Plug 'jiangmiao/auto-pairs'

  "Plug 'kana/vim-fakeclip', {'on':  ['<Plug>(fakeclip-']}
  Plug 'kana/vim-smartchr'

  Plug 'thinca/vim-quickrun', {'on': ['QuickRun', '<Plug>(quickrun']}

  "Plug 'kana/vim-textobj-user'
  "Plug 'kana/vim-textobj-jabraces', {'on': ['TextobjJabracesDefaultKeyMappings']}
  "Plug 'kana/vim-textobj-fold', {'on': ['TextobjFoldDefaultKeyMappings']}
  "Plug 'anyakichi/vim-textobj-ifdef', {'on': ['TextobjIfdefDefaultKeyMappings']}
  "Plug 'akiyan/vim-textobj-php', {'for': ['php']}
  "Plug 'bps/vim-textobj-python', {'for': ['python']}
  "Plug 'rhysd/vim-textobj-ruby', {'for': ['ruby']}
  "Plug 'akiyan/vim-textobj-xml-attribute', {'for': ['xml']}

  Plug 'junegunn/vim-easy-align', {'on': ['EasyAlign']}

  Plug 'vim-test/vim-test'

  Plug 'tyru/open-browser.vim'

  Plug 'sheerun/vim-polyglot'
  Plug 'w0rp/ale'

  " shell
  Plug 'z0mbix/vim-shfmt', { 'for': 'sh'  }

  Plug 'tobyS/vmustache'
  Plug 'tobyS/pdv', {'for': ['php']}

"" " http://www.karakaram.com/vim/phpunit-location-list/
  "Plug 'karakaram/vim-quickrun-phpunit', {'for': ['php']}
  "Plug 'vim-scripts/phpfolding.vim', {'for': ['php']}
  "Plug 'beanworks/vim-phpfmt', {'for': ['php']}
  Plug 'stephpy/vim-php-cs-fixer', {'for': ['php']}
  Plug 'StanAngeloff/php.vim'
  Plug 'jwalton512/vim-blade', {'for': ['php']}

  Plug 'oppara/sql_iabbr.vim', {'for': ['sql']}
  Plug 'mattn/vim-sqlfmt', {'on': 'SQLFmt'}

  Plug 'kannokanno/previm', {'for': ['markdown']}
  Plug 'rhysd/vim-gfm-syntax'
  Plug 'mattn/vim-maketable'

  Plug 'hail2u/vim-css3-syntax', {'for': ['css']}

  Plug 'elzr/vim-json'
  "Plug 'heavenshell/vim-jsdoc', {
        "\ 'for': ['javascript', 'javascript.jsx','typescript'],
        "\ 'do': 'make install'
        "\}

  Plug 'hashivim/vim-terraform'

call plug#end()

filetype plugin indent on

" source:  "{{{1
call map(sort(split(globpath(&runtimepath, '_config/*.vim'))), {->[execute('exec "so" v:val')]})

